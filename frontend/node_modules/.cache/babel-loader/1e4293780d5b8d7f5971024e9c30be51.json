{"ast":null,"code":"var _jsxFileName = \"D:\\\\q-a\\\\frontend\\\\src\\\\chatbot\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport \"../App.css\";\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\"; // \"Explain things like you would to a 10 year old learning how to code.\"\n\nconst systemMessage = {\n  //  Explain things like you're talking to a software professional with 5 years of experience.\n  \"role\": \"system\",\n  \"content\": \"Explain things like you're talking to a software professional with 2 years of experience.\"\n};\n\nfunction Chatbot() {\n  _s();\n\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages); // Initial system message to determine ChatGPT functionality\n    // How it responds, how it talks, etc.\n\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n\n  async function processMessageToChatGPT(chatMessages) {\n    // messages is an array of messages\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessages]\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      console.log(data);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      margin: \"10px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"600px\",\n        width: \"700px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 43\n            }, this) : null,\n            children: messages.map((message, i) => {\n              console.log(message);\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chatbot, \"r/FE44OqUzx+jckMaC7VuNYpcM8=\");\n\n_c = Chatbot;\nexport default Chatbot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"sources":["D:/q-a/frontend/src/chatbot/index.js"],"names":["useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","API_KEY","systemMessage","Chatbot","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","console","log","choices","display","justifyContent","margin","position","height","width","i"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport \"../App.css\"\r\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\n\r\nconst API_KEY = \"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\";\r\n// \"Explain things like you would to a 10 year old learning how to code.\"\r\nconst systemMessage = { //  Explain things like you're talking to a software professional with 5 years of experience.\r\n  \"role\": \"system\", \"content\": \"Explain things like you're talking to a software professional with 2 years of experience.\"\r\n}\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\r\n      sentTime: \"just now\",\r\n      sender: \"ChatGPT\"\r\n    }\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const handleSend = async (message) => {\r\n    const newMessage = {\r\n      message,\r\n      direction: 'outgoing',\r\n      sender: \"user\"\r\n    };\r\n\r\n    const newMessages = [...messages, newMessage];\r\n    \r\n    setMessages(newMessages);\r\n\r\n    // Initial system message to determine ChatGPT functionality\r\n    // How it responds, how it talks, etc.\r\n    setIsTyping(true);\r\n    await processMessageToChatGPT(newMessages);\r\n  };\r\n\r\n  async function processMessageToChatGPT(chatMessages) { // messages is an array of messages\r\n   \r\n\r\n    let apiMessages = chatMessages.map((messageObject) => {\r\n      let role = \"\";\r\n      if (messageObject.sender === \"ChatGPT\") {\r\n        role = \"assistant\";\r\n      } else {\r\n        role = \"user\";\r\n      }\r\n      return { role: role, content: messageObject.message}\r\n    });\r\n\r\n\r\n  \r\n    const apiRequestBody = {\r\n      \"model\": \"gpt-3.5-turbo\",\r\n      \"messages\": [\r\n        systemMessage,  \r\n        ...apiMessages \r\n      ]\r\n    }\r\n\r\n    await fetch(\"https://api.openai.com/v1/chat/completions\", \r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Authorization\": \"Bearer \" + API_KEY,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(apiRequestBody)\r\n    }).then((data) => {\r\n      return data.json();\r\n    }).then((data) => {\r\n      console.log(data);\r\n      setMessages([...chatMessages, {\r\n        message: data.choices[0].message.content,\r\n        sender: \"ChatGPT\"\r\n      }]);\r\n      setIsTyping(false); \r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" style={{display:\"flex\", justifyContent:\"center\",margin:\"10px\"}}>\r\n      <div style={{ position:\"relative\", height: \"600px\", width: \"700px\"  }}>\r\n        <MainContainer>\r\n          <ChatContainer>       \r\n            <MessageList \r\n              scrollBehavior=\"smooth\" \r\n              typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\r\n            >\r\n              {messages.map((message, i) => {\r\n                console.log(message)\r\n                return <Message key={i} model={message} />\r\n              })}\r\n            </MessageList>\r\n            <MessageInput placeholder=\"Type message here\" onSend={handleSend} />        \r\n          </ChatContainer>\r\n        </MainContainer>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chatbot\r\n"]},"metadata":{},"sourceType":"module"}